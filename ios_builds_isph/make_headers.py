#!/usr/bin/env python3


AUTOGEN_WARNING = "This file is auto-generated by 'generate.py'! Do not edit!"


def enum_from_build(build: str) -> str:
    return f"BUILD_{build}"


def make_type_header(path: str, builds: list[str]) -> None:
    with open(path, "w") as header:
        header.write(f"/* {AUTOGEN_WARNING} */\n\n")

        header.write("#pragma once\n\n")

        header.write("typedef enum {\n")
        [
            header.write(f"    {enum_from_build(build)} = {1000+i},\n")
            for i, build in enumerate(builds)
        ]
        header.write("} build_t;\n\n")

        header.write("#define BUILD_INVALID ((build_t)-1)\n\n")

        header.write("static build_t BUILDS[] = {\n")
        [header.write(f"    {enum_from_build(build)},\n") for build in builds]
        header.write("};\n\n")

        header.write("build_t build_from_str(char const *str);\n")


def make_table_header(path: str, builds: list[str]) -> None:
    with open(path, "w") as header:
        header.write(f"/* {AUTOGEN_WARNING} */\n\n")
        header.write("#pragma once\n\n")
        header.write('#include "build.h"\n\n')

        header.write("static build_t g_builds[] = {\n")
        [header.write(f"    {enum_from_build(build)},\n") for build in builds]
        header.write("};\n\n")


def make_cmp_header(path: str, builds: list[str]) -> None:
    with open(path, "w") as header:
        header.write(f"/* {AUTOGEN_WARNING} */\n\n")
        header.write("#pragma once\n\n")

        header.write('#include "build.h"\n\n')
        header.write("#include <string.h>\n\n")

        header.write("build_t build_from_str(char const *str) {\n")
        for build in builds:
            header.write(
                f'    if (0 == strcmp(str, "{build}")) return {enum_from_build(build)};\n'
            )

        header.write("\n    return BUILD_INVALID;\n")
        header.write("}\n")


with open("builds.txt", "r") as f:
    builds = f.read().splitlines()


make_type_header("build.h", builds)
make_table_header("build_table.h", builds)
make_cmp_header("build_cmp.h", builds)
