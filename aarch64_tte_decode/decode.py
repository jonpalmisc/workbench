#!/usr/bin/env python3
#
# Tiny example/concept of decoding TTEs. Only decodes upper attributes for now;
# see Figure D8-16 in the Arm ARM for more context.
#
# Diagram templates created with <https://monodraw.helftone.com>!


import sys


def xrep(template: str, data: str) -> str:
    """Replace each 'x' with the nth character of the data string."""

    i = 0
    result = ""
    for c in template:
        if c == "x":
            result += data[i]
            i += 1
        else:
            result += c

    return result


if len(sys.argv) < 2:
    print(f"usage: {sys.argv[0]} <value>", file=sys.stderr)
    sys.exit(0)

raw = int(sys.argv[1], 0)
upper_diag = format(raw >> 49, "014b")


# fmt: off
print("")
print("              63                                       50")
print("             \u250C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2510")
print(xrep("       upper \u2502 x \u2502 x x x x \u2502 x x x x \u2502 x \u2502 x \u2502 x \u2502 x \u2502 x \u2502", upper_diag))
print("             \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518")
print("               \u25B2      \u25B2         \u25B2      \u25B2   \u25B2   \u25B2   \u25B2   \u25B2")
print("               \u2502      \u2502         \u2502      \u2502   \u2502   \u2502   \u2502   \u2502")
print("     ignored \u2500\u2500\u2518      \u2502         \u2502      \u2502   \u2502   \u2502   \u2502   \u2502")
print("        pbha \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502      \u2502   \u2502   \u2502   \u2502   \u2502")
print("    reserved \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502   \u2502   \u2502   \u2502   \u2502")
print("         uxn \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502   \u2502   \u2502")
print("         pxn \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502   \u2502")
print("  contiguous \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502")
print("         dbm \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502")
print("          gp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518")
